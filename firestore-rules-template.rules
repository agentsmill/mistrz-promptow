rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // ===== Helper Functions =====
    
    // Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the user is the owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Check if the user has admin role
    function isAdmin() {
      return isAuthenticated() && request.auth.token.admin == true;
    }
    
    // Check if the user has moderator role
    function isModerator() {
      return isAuthenticated() && (request.auth.token.moderator == true || isAdmin());
    }
    
    // Check if the request is coming from a verified email
    function isEmailVerified() {
      return isAuthenticated() && request.auth.token.email_verified == true;
    }
    
    // Check if the timestamp is recent (within the last 5 minutes)
    function isRecentTimestamp(timestamp) {
      return timestamp is timestamp && 
             timestamp <= request.time && 
             timestamp >= request.time - duration.value(5, 'm');
    }
    
    // Validate user data structure
    function isValidUserData(data) {
      return data.keys().hasOnly(['displayName', 'email', 'photoURL', 'createdAt', 'lastLogin', 'preferences']) &&
             data.displayName is string &&
             data.email is string &&
             (data.photoURL == null || data.photoURL is string) &&
             data.createdAt is timestamp &&
             data.lastLogin is timestamp &&
             data.preferences is map;
    }
    
    // Validate user progress data structure
    function isValidProgressData(data) {
      return data.keys().hasOnly(['userId', 'lessonId', 'completed', 'score', 'attempts', 'lastAttemptAt', 'responses']) &&
             data.userId is string &&
             data.lessonId is string &&
             data.completed is bool &&
             data.score is number &&
             data.attempts is number &&
             data.lastAttemptAt is timestamp &&
             data.responses is list;
    }
    
    // Validate leaderboard entry data structure
    function isValidLeaderboardData(data) {
      return data.keys().hasOnly(['userId', 'displayName', 'totalScore', 'completedLessons', 'lastUpdated']) &&
             data.userId is string &&
             data.displayName is string &&
             data.totalScore is number &&
             data.completedLessons is number &&
             data.lastUpdated is timestamp;
    }
    
    // Validate lesson content data structure
    function isValidLessonData(data) {
      return data.keys().hasOnly(['lessonId', 'title', 'technique', 'explanation', 'tasks', 'order', 'difficulty']) &&
             data.lessonId is string &&
             data.title is string &&
             data.technique is string &&
             data.explanation is string &&
             data.tasks is list &&
             data.order is number &&
             data.difficulty is string;
    }
    
    // Check if the write operation is limited to specific fields
    function isFieldsOnly(allowedFields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(allowedFields);
    }
    
    // Rate limiting function - checks if user has made too many requests
    function isRateLimited(userId, maxRequests, periodMinutes) {
      return get(/databases/$(database)/documents/rate_limits/$(userId)).data.requestCount < maxRequests || 
             get(/databases/$(database)/documents/rate_limits/$(userId)).data.resetTime < request.time;
    }
    
    // ===== Collection Rules =====
    
    // User data - only accessible by the user or admin
    match /users/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create: if isAuthenticated() && request.auth.uid == userId && isValidUserData(request.resource.data);
      allow update: if (isOwner(userId) && isValidUserData(request.resource.data) && isFieldsOnly(['displayName', 'photoURL', 'lastLogin', 'preferences'])) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // User progress - only accessible by the user or admin
    match /user_progress/{progressId} {
      allow read: if isAuthenticated() && (resource.data.userId == request.auth.uid || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid && isValidProgressData(request.resource.data);
      allow update: if isAuthenticated() && resource.data.userId == request.auth.uid && request.resource.data.userId == request.auth.uid && isValidProgressData(request.resource.data);
      allow delete: if isAdmin();
    }
    
    // Leaderboard - readable by all, writable by admin or system
    match /leaderboard/{entry} {
      allow read: if true;
      allow create, update: if isAdmin() && isValidLeaderboardData(request.resource.data);
      allow delete: if isAdmin();
    }
    
    // Lesson content - readable by all, writable by admin
    match /lesson_content/{lesson} {
      allow read: if true;
      allow create, update: if isAdmin() && isValidLessonData(request.resource.data);
      allow delete: if isAdmin();
    }
    
    // User feedback - users can create, only moderators/admins can read all
    match /user_feedback/{feedbackId} {
      allow read: if isOwner(resource.data.userId) || isModerator();
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isModerator();
      allow delete: if isAdmin();
    }
    
    // Rate limiting - used to prevent abuse
    match /rate_limits/{userId} {
      allow read: if isOwner(userId) || isAdmin();
      allow write: if isAdmin();
    }
    
    // System settings - only accessible by admin
    match /system_settings/{setting} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Analytics data - only accessible by admin
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }
    
    // ===== Hierarchical Data Rules =====
    
    // User notifications - nested under users
    match /users/{userId}/notifications/{notificationId} {
      allow read: if isOwner(userId);
      allow create: if isAdmin();
      allow update: if isOwner(userId) || isAdmin();
      allow delete: if isOwner(userId) || isAdmin();
    }
    
    // User achievements - nested under users
    match /users/{userId}/achievements/{achievementId} {
      allow read: if isOwner(userId) || isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    // Lesson comments - nested under lesson_content
    match /lesson_content/{lessonId}/comments/{commentId} {
      allow read: if true;
      allow create: if isAuthenticated() && isEmailVerified() && request.resource.data.userId == request.auth.uid;
      allow update: if isOwner(resource.data.userId) && isFieldsOnly(['content', 'updatedAt']);
      allow delete: if isOwner(resource.data.userId) || isModerator();
    }
  }
}